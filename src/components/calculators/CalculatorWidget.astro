---
import InputField from "./InputField.astro";
import ResultsDisplay from "./ResultsDisplay.astro";

interface InputOption {
  label: string;
  value: string | number;
}

interface InputConfig {
  id: string;
  label: string;
  type: 'text' | 'number' | 'select' | 'radio' | 'checkbox';
  defaultValue?: string | number | boolean;
  required?: boolean;
  min?: number;
  max?: number;
  step?: number;
  options?: InputOption[];
  helpText?: string;
}

export interface Props {
  id: string;
  title: string;
  description?: string;
  inputs?: InputConfig[];
  initialResults?: Array<{
    label: string;
    value: string | number;
    type?: 'text' | 'currency' | 'percentage' | 'number';
    description?: string;
  }>;
  showShareButton?: boolean;
  showPrintButton?: boolean;
  calculationFunction?: string;
}

const {
  id,
  title,
  description,
  inputs = [],
  initialResults = [],
  showShareButton = true,
  showPrintButton = true,
  calculationFunction = "calculateResults"
} = Astro.props;
---

<div class="calculator-widget" data-calculator-id={id}>
  <div class="space-y-8">
    {description && (
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        {description}
      </p>
    )}
    
    <form id={`${id}-form`} class="space-y-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h3 class="text-xl font-semibold mb-4">Your Information</h3>
        
        <div class="space-y-4">
          {inputs.map((input) => (
            <div>
              <InputField
                id={input.id}
                label={input.label}
                type={input.type}
                defaultValue={input.defaultValue}
                required={input.required}
                min={input.min}
                max={input.max}
                step={input.step}
                options={input.options}
              />
              {input.helpText && (
                <div class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    {input.helpText}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
        
        <div class="mt-6">
          <button
            type="submit"
            aria-label="Calculate results"
            class="w-full bg-primary-600 hover:bg-primary-700 text-white py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
          >
            Calculate
          </button>
        </div>
      </div>
      
      <div id={`${id}-results-container`}>
        <ResultsDisplay
          title="Your Results"
          results={initialResults}
          showShareButton={showShareButton}
          showPrintButton={showPrintButton}
        />
      </div>
    </form>
  </div>
</div>

<!-- External calculator widget script -->
<script is:inline src="/scripts/calculator-widget.js"></script>
<script define:vars={{ id, calculationFunction, title }}>
  // Initialize the calculator widget with the component props
  document.addEventListener('DOMContentLoaded', () => {
    // @ts-ignore - calculatorWidget is defined in the external script
    if (window.calculatorWidget) {
      // @ts-ignore - calculatorWidget is defined in the external script
      window.calculatorWidget.init(id, calculationFunction, title);
    }
  });
</script>