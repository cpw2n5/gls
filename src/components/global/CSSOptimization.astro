---
/**
 * CSSOptimization.astro
 *
 * This component optimizes CSS loading for better performance.
 * It implements strategies to reduce render-blocking CSS and improve critical rendering path.
 */


---

<script>
  import { optimizeCSS, extractCriticalCSS } from '../../utils/cssLoader.js';
  import { getCriticalSelectorsForPage, isCriticalCssFile } from '../../utils/criticalCssExtractor.js';
  
  // Determine the current page type
  const currentPath = window.location.pathname;
  let pageType = 'other';
  
  if (currentPath === '/' || currentPath === '') {
    pageType = 'home';
  } else if (currentPath.startsWith('/articles/') && !currentPath.endsWith('/articles/')) {
    pageType = 'article';
  }
  
  // Get all CSS files
  const allCssFiles = Array.from(document.querySelectorAll('link[rel="stylesheet"]'))
    .map(link => link.getAttribute('href'))
    .filter(href => href);
  
  // Critical CSS files that should be loaded immediately
  const criticalFiles = [];
  
  // Non-critical CSS files that can be loaded asynchronously
  const nonCriticalFiles = [];
  
  // Process each CSS file
  allCssFiles.forEach(href => {
    if (isCriticalCssFile(href, pageType)) {
      criticalFiles.push(href);
    } else {
      nonCriticalFiles.push(href);
      
      // Remove the render-blocking link element
      const linkElement = document.querySelector(`link[href="${href}"]`);
      if (linkElement) {
        linkElement.remove();
      }
    }
  });
  
  // Find the slug CSS file specifically
  const slugCssFiles = allCssFiles.filter(href => href && href.includes('_slug_'));
  
  // For the home page, we want to extract any critical styles from the slug CSS
  // but defer loading the full file
  if (pageType === 'home' && slugCssFiles.length > 0) {
    // Make sure slug CSS is in nonCriticalFiles and not in criticalFiles
    slugCssFiles.forEach(href => {
      if (criticalFiles.includes(href)) {
        criticalFiles.splice(criticalFiles.indexOf(href), 1);
      }
      if (!nonCriticalFiles.includes(href)) {
        nonCriticalFiles.push(href);
      }
      
      // Try to extract critical styles from the slug CSS
      const criticalSelectors = getCriticalSelectorsForPage('home');
      extractCriticalCSS(href, criticalSelectors)
        .then(criticalCSS => {
          if (criticalCSS) {
            // Inject the critical CSS inline
            const style = document.createElement('style');
            style.textContent = criticalCSS;
            document.head.appendChild(style);
          }
        })
        .catch(err => console.warn('Error extracting critical CSS:', err));
    });
  }
  
  // Optimize CSS loading
  optimizeCSS(criticalFiles, nonCriticalFiles);
</script>

<!-- Inline critical CSS for above-the-fold content -->
<style is:inline>
  /* Critical CSS for the header, navigation, and above-the-fold content */
  /* This ensures the initial render doesn't wait for external CSS files */
  
  /* Base styles */
  html {
    scroll-behavior: smooth;
  }
  
  body {
    margin: 0;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    line-height: 1.5;
  }
  
  /* Layout components */
  header {
    display: flex;
    width: 100%;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    background-color: white;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  }
  
  .container {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  /* Hero section styles - critical for home page */
  .bg-gradient-to-br {
    background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
  }
  
  .from-primary-700 {
    --tw-gradient-from: #1a56db;
    --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(26, 86, 219, 0));
  }
  
  .to-primary-900 {
    --tw-gradient-to: #1e3a8a;
  }
  
  .text-white {
    color: white;
  }
  
  .py-16 {
    padding-top: 4rem;
    padding-bottom: 4rem;
  }
  
  .text-center {
    text-align: center;
  }
  
  .mx-auto {
    margin-left: auto;
    margin-right: auto;
  }
  
  .max-w-3xl {
    max-width: 48rem;
  }
  
  .text-4xl {
    font-size: 2.25rem;
    line-height: 2.5rem;
  }
  
  .font-bold {
    font-weight: 700;
  }
  
  .mb-6 {
    margin-bottom: 1.5rem;
  }
  
  .text-xl {
    font-size: 1.25rem;
    line-height: 1.75rem;
  }
  
  .mb-8 {
    margin-bottom: 2rem;
  }
  
  .flex {
    display: flex;
  }
  
  .flex-wrap {
    flex-wrap: wrap;
  }
  
  .justify-center {
    justify-content: center;
  }
  
  .gap-4 {
    gap: 1rem;
  }
  
  /* Responsive container sizes */
  @media (min-width: 640px) {
    .container {
      max-width: 640px;
    }
  }
  
  @media (min-width: 768px) {
    .container {
      max-width: 768px;
    }
    
    .text-5xl {
      font-size: 3rem;
      line-height: 1;
    }
  }
  
  @media (min-width: 1024px) {
    .container {
      max-width: 1024px;
    }
  }
  
  @media (min-width: 1280px) {
    .container {
      max-width: 1280px;
    }
  }
</style>

<!-- Preload critical fonts -->
<link rel="preload" href="/fonts/main-font.woff2" as="font" type="font/woff2" crossorigin>